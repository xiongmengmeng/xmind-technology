import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
xmind_name="操作系统"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("进程")
r2=s2.getRootTopic()
r2.setTitle("进程")


content={
'进程':[
    '对正在运行中的程序的一个抽象',
    '是某一类特定活动的总和，它有程序、输入输出以及状态',
    '操作系统中最核心的概念，操作系统的其他所有内容都围绕着进程展开',  
],
'进程模型':[
    '实际上只有一个物理程序计数器',
    '每个程序准备运行时：其【逻辑程序计数器】会装载到【物理程序计数器】中',
    '程序运行结束后：把【物理程序计数器】放回进程的【逻辑程序计数器】中',
    'CPU会在各进程间来回快速切换,每一个核一次只能运行一个线程'
],
'进程的创建(两种)':[
    {'系统初始化(init)':[
        '启动操作系统时，创建若干个进程'
    ]},
    {'正在运行的程序执行了创建进程的系统调用fork':[
        '创建一个与调用进程相关的副本',
        '父子进程会有相同的内存映像，相同的环境字符串和相同的打开文件'
    ]}
],
'进程的终止':[
    {'正常退出(自愿的)':[
        '编译器完成给定程序的编译后，编译器执行一个系统调用告诉操作系统它完成了工作(exit)'
    ]},
    {'错误退出(自愿的)':[
        '如执行一条不存在的命令，于是编译器就会提醒并退出'
    ]},
    '严重错误(非自愿的)',
    {'被其他进程杀死(非自愿的)':[
        '某个进程执行系统调用告诉操作系统杀死某个进程(kill)'
    ]}
],
'UNIX进程体系':[
    '在UNIX中，进程和它的子进程以及子进程的子进程共同组成一个进程组',
    '当用户从键盘发出一个信号，信号会被发送给与键盘相关的进程组中的所有成员',
    '每个进程可以捕获该信号、忽略该信号或采取默认的动作',
    '整个操作系统中所有的进程都隶属于一个单个以init为根的进程树'
],
'进程状态(三种)':[
    '每个进程是一个独立的实体，有其自己的【程序计数器】和【内部状态】',
    {'运行态':[
        '进程实际占用CPU时间片运行时间'
    ]},
    {'就绪态':[
        '可运行，但因为其他进程正在运行而处于就绪状态'
    ]},
    {'阻塞态':[
        '除非某种外部事件发生，否则进程不能运行'
    ]}
],
'进程的实现':[
    '操作系统为了执行进程间的切换，维护着一张进程表(process table)，每个进程占用一个进程表项',
    {'进程表内容':[
        '进程管理',
        '存储管理',
        '文件管理'
    ]}
],
'进程间通信(六种)':[
    {'信号signal':[
        '信号通过shell将任务发送给子进程',
        '子进程进程可以选择它想要处理的信号，也可以选择阻止信号',
        {'不能被忽略的两种信息':[
            'SIGSTOP信号：通知当前正在运行的进程执行关闭操作',
            'SIGKILL信号：通知当前进程应该被杀死'
        ]},
        '操作系统会中断目标程序的进程来向其发送信号、在任何非原子指令中，执行都可中断'
    ]},
    {'管道pipe':[
        '在两个进程间，可建立一个通道，一个进程向通道里写入字节流，另一个进程从通道中读取字节流',
        '管道是同步的，当进程尝试从空管道读取数据时会被阻塞，直到有可用数据为止',
        {'sort <f | head':[
            '创建两个进程，一个是sort，一个是head',
            'sort:会在这两个应用程序之间建立一个管道使得sort进程的标准输出作为head程序的标准输入'
        ]}
    ]},
    {'共享内存shared memory':[
        '两个或多个进程可以访问公共内存空间,一个进程所作修改可对另一个进程可见'
    ]},
    {'先入先出队列FIFO':[
        '命名管道(Named Pipes),与常规管道类似，但有备份文件'
    ]},
    {'消息队列Message Queue':[
        '描述内核寻址空间内的内部链接列表',
        '可以按几种不同方式将消息按顺序发送到队列并从队列中检索消息'
    ]},
    {'套接字Socket':[
        '提供端到端的双相通信',
        '一个套接字可以与一个或多个进程关联,两种模式',
        '一般用于两个进程间的网络通信，网络套接字需有TCP或UDP等基础协议的支持',
        {'分类':[
            '顺序包套接字(Sequential Packet Socket)',
            '数据报套接字(Datagram Socket)',
            '流式套接字(Stream Socket)',
            '原始套接字(Raw Socket)'
        ]}
    ]}
]
}

#构建xmind
xmind.build(content,r2)
#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 