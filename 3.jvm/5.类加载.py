import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
xmind_name="jvm"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("类加载")
r2=s2.getRootTopic()
r2.setTitle("类加载")


content={
'类的生命周期':[
    '加载（Loading）',
    {'连接':[
        '验证（Verification）',
        '准备（Preparation）',
        '解析（Resolution）'
    ]},
    '初始化（Initialization）',
    '使用（Using）',
    '卸载（Unloading）' 
],
'加载':[
    {'三阶段':[
        '1.通过类的全限定名来获取此类的二进制字节流',
        '2.将【字节流】所代表的【静态存储结构】转化为【方法区】的【运行时数据结构】',
        '3.生成代表此类的java.lang.Class对象，作为方法区类各种数据的访问入口'
    ]},
    '类加载器--双亲委派模型--破坏双亲委派模型的情况',
],
'连接':[
    {'验证':[
        {'目的':[
            '确保Class文件的字节流包含信息符合要求'
        ]},
        {'四阶段':[
            {'文件格式验证':[
                {'目的':[
                    '保证输入的字节流能正确地解析并存储于方法区'
                ]},
                '基于二进制字节流进行的，通过，字节流才被允许进入JVM内存的方法区中进行存储',
                '后面三个验证阶段全是基于方法区的存储结构，不会再直接读取、操作字节流'
            ]},
            {'元数据验证':[
                '对字节码描述的信息进行语义分析'
            ]},
            {'字节码验证':[
                {'目的':[
                    '通过数据流和控制流分析，确保程序语义合法、符合逻辑'
                ]},
                '对类的方法体（Class文件中的Code属性）进行校验分析'
            ]},
            {'符号引用验证':[
                {'目的':[
                    '确保解析行为能正常执行'
                ]},
                '解析阶段，会将符号引用转化为直接引用'
            ]}
        ]}
    ]},
    {'准备':[
        {'目的':[
            '为类中定义的变量分配内存并设置初始值(jvm 默认的初值)'
        ]},
        {'类中定义的变量':[
            '仅包括类变量，不包括实例变量',
            '实例变量将会在对象实例化时随着对象一起分配在Java堆中'
        ]},
        {'内存':[
            'JDK 8后变量的内存也是指Java堆，方法区只是一种逻辑概念'
        ]},
        {'初始值':[
            '通常情况下是数据类型的零值',
            {'特殊':[
                '类字段的字段属性表中存在ConstantValue属性，变量值就会被初始化为属性所指定的初始值'
            ]}
        ]}
    ]},
    {'解析':[
        {'定义':[
            '将常量池内的符号引用替换为直接引用的过程',
            {'符号引用':[
                '以一组符号来描述所引用目标'
            ]},
            {'直接引用':[
                '直接指向目标的【指针】、相对偏移量或者是一个能间接定位到目标的【句柄】',
                '和内存布局相关,如果有了直接引用，那引用的目标必已在内存中存在'
            ]}
        ]},
        {'符号引用类型':[
            '类,接口,字段,类方法,接口方法,方法类型',
            '方法类型,方法句柄,调用点限定符'
        ]}
    ]}
]

}

#构建xmind
xmind.build(content,r2)
#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 