import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
xmind_name="cpu"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("磁盘")
r2=s2.getRootTopic()
r2.setTitle("磁盘")


content={
'磁盘':[
    {'物理结构':[
        '扇区方式',
        '可变长方式'
    ]},
    {'扇区':[
        '定义：对磁盘进行物理读写的最小单位',
        '1个扇区是512字节,1簇=512字节=1扇区',
        '不管是多么小的文件，都会占用1簇的空间',
        '文件占用磁盘空间都是1簇的整数倍'
    ]},
    {'作用':[
        '存储程序,缺点是读取速度慢',
        '应用启动时，程序会由磁盘加载到内存'
    ]},
    {'重要概念':[
         {'虚拟内存':[
            '把磁盘的一部分作为假想的内存来使用',
            '实际上正在运行的程序，必须存在内存中',
            '实现：把实际内存的内容，和磁盘虚拟内存的内容进行部分置换，并同时运行程序',
            '虚拟内存的方法有分页式和分段式,页大小为4KB',
            '虚拟内存能避免因内存不足导致的应用无法启动',
            '虚拟内存使用时的Page In和Page Out往往伴随低速的磁盘访问->应用的运行变得迟钝']},
         {'磁盘缓存（disk cache）':[
             '从磁盘中读出的数据存储到内存空间中']}
    ]},
    {'节省内存的方法':[
        'DLL（Dynamic Link Library）文件实现函数共有:程序运行时可以动态加载Library文件',
        'Library（函数和数据的集合）',
        '调用_stdcall来减小程序文件大小'
    ]}],
'文件压缩':[
    '文件：字节数据的集合体',
    {'压缩算法':[
        {'RLE算法':[
            '把文件内容用“数据×重复次数”的形式压缩',
            '缺点:文本文件中，同样字符多次重复出现情况少',
            '适用于压缩图像，exe文件']},
        {'哈夫曼算法':[
            '常出现数据用小于8位字节数表示，不常用数据用超过8位的字节数表示',
            '为各压缩对象文件构造最佳编码体系，并以该编码体系为基础进行压缩',
            '用二叉树实现哈夫曼编码:构建能够明确进行区分的编码体系',
            '应用：压缩软件LHA'
        ]}
    ]},
    {'可逆和非可逆压缩':[
        '原始的图像文件是BMP格式',
        'JPEG格式文件：非可逆压缩，还原后图像信息有部分模糊',
        'GIF格式文件：可逆压缩，因有色数不能超过256色，还原后颜色会有一些缺失'
    ]}]
}

#构建xmind
xmind.build(content,r2)

#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 