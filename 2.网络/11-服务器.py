import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
from xmind.core.markerref import MarkerId
xmind_name="internet"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("服务器")
r2=s2.getRootTopic()
r2.setTitle("服务器")


content={
'结构':[
    '等待连接模块',
    '负责与客户端通信的模块'
],
'过程':[
    '1.服务器程序启动,读取配置文件,完成初始化操作后，创建套接字,运行等待连接模块',
    '2.客户端发起连接时，该模块运行并接受连接，然后启动客户端通信模块，移交完成连接的套接字',
    '客户端通信模块会使用已连接的套接字与客户端进行通信，通信结束后，模块退出',
    '注：每次有新的客户端发起连接，都会启动一个新的客户端通信模块，其与客户端是一对一的关系'
],
'服务器程序调用Socket库':[
    {'1.创建套接字（创建套接字阶段）':[
        '<描述符1>=socket()'
    ]},
    {'2.将套接字设置为等待连接状态（等待连接阶段）':[
        'bind(<描述符1>,<端囗号>,...)',
        'listen(<描述符1>,...)'
    ]},
    {'3.接受连接（接受连接阶段）':[
        '<描述符2>=accept(<描述符1>,...)',
        '客户端包到达->',
        '协议栈给等待连接的套接字复制一个副本->',
        '将连接对象等控制信息写入新的套接字中'
    ]},
    {'4.收发数据（收发阶段）':[
        'read(<描述符2>,<接收缓冲区>,...)',
        'write(<描述符2>,<发送数据>,...)'
    ]},
    {'4 断开管道并删除套接字（断开阶段）':[
        'close(<描述符2>)'
    ]}
],
'接收操作':[
    {'1.网卡接收到信号，将其还原成数字信息':[
        '网卡的MAC模块将网络包从电信号->数字信息，校验FCS并存入缓冲区',
        '网卡通过中断将网络包到达事件通知到CPU',
        'CPU暂停当前工作，切换到网卡的任务',
        '网卡驱动会根据MAC头部判断协议类型，并将包交给相应的协议栈',
    ]},
    {'2.协议栈的IP模块':[
        '判断是不是发给自己的',
        '判断网络包是否经过分片',
        '将包转交给TCP或UDP模块'
    ]},
    {'3.1.TCP模块处理连接包':[
        '确认TCP头部的控制位SYN',
        '检查接收方端口号',
        '为相应的等待连接套接字复制一个新的副本',
        '记录发送方IP地址和端口号等信息'
    ]},
    {'3.2.TCP模块处理数据包':[
        '根据收到的包的发送方IP地址,端口号、接收方IP地址,端口号找到相应套接字',
        '将数据块拼合起来并保存在接收缓冲区',
        '向客户端返回ACK'
    ]},
    {'4.TCP模块的断开操作':[
        '服务器:调用Socket库的close,TCP生成一个控制位FIN为1的TCP头部->客户端',
        '客户端:收到包后,调用close，生成一个FIN为1的TCP头部,一个ACK号->服务器',
        '服务器:再返回ACK号',
        '断开操作完成后，套接字会在一段时间后被删除'
    ]}
]

}


#构建xmind
xmind.build(content,r2)
#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 