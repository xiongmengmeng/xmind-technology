import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
xmind_name="操作系统"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("")
r2=s2.getRootTopic()
r2.setTitle("")


content={
'进程':[
    '对正在运行中的程序的一个抽象',
    '是操作系统中最核心的概念，作系统的其他所有内容都是围绕着进程展开的',
    '是某一类特定活动的总和，它有程序、输入输出以及状态'
],
'进程模型':[
    '实际上只有一个物理程序计数器，每个程序要运行时，其逻辑程序计数器会装载到物理程序计数器中',
    '程序运行结束后，其物理程序计数器会是真正的程序计数器，然后再把它放回进程的逻辑计数器中',
    'CPU 会在各个进程之间来回快速切换,每一个核只能一次运行一个线程'
],
'进程的创建':[
    '系统初始化（init）：启动操作系统时，通常会创建若干个进程',
    '正在运行的程序执行了创建进程的系统调用（比如 fork）',
    {'fork':[
        '创建一个与调用进程相关的副本',
        '一个父进程和子进程会有相同的内存映像，相同的环境字符串和相同的打开文件'
    ]}
],
'进程的终止':[
    '正常退出(自愿的):编译器完成了给定程序的编译后，编译器会执行一个系统调用告诉操作系统它完成了工作(exit)',
    '错误退出(自愿的)：比如执行一条不存在的命令，于是编译器就会提醒并退出',
    '严重错误(非自愿的)',
    '被其他进程杀死(非自愿的):某个进程执行系统调用告诉操作系统杀死某个进程(kill)'
],
'UNIX 进程体系':[
    '在 UNIX 中，进程和它的所有子进程以及子进程的子进程共同组成一个进程组',
    '当用户从键盘发出一个信号，该信号被发送给当前与键盘相关的进程组中的所有成员',
    '每个进程可以分别捕获该信号、忽略该信号或采取默认的动作，即被信号 kill 掉',
    '整个操作系统中所有的进程都隶属于一个单个以 init 为根的进程树'
],
'进程状态':[
    '每个进程是一个独立的实体，有其自己的程序计数器和内部状态',
    '运行态:进程实际占用CPU时间片运行时间',
    '就绪态:可运行，但因为其他进程正在运行而处于就绪状态',
    '阻塞态:除非某种外部事件发生，否则进程不能运行'
]
}

#构建xmind
xmind.build(content,r2)
#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 