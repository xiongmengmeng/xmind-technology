import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
xmind_name="jvm"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("jvm_thread")
r2=s2.getRootTopic()
r2.setTitle("线程")


content={
'Java与线程':[
    {'线程':[
        'Java里进行处理器资源调度的最基本单位'
    ]},
    {'实现线程主要三种方式':[
        {'内核线程实现（1：1）':[
            {'内核线程':[
                '直接由操作系统内核支持的线程',
                '由内核来完成线程切换',
                '操纵调度器对线程进行调度,将线程任务映射到各处理器上'
            ]},
            {'轻量级进程':[
                '由一个内核线程支持',
                {'局限性':[
                    '基于内核线程实现，各种线程操作如创建、析构及同步需系统调用',
                    '代价高，要在用户态，内核态中来回切换',
                    '消耗内核资源，系统支持进程的数量有限'
                ]}
            ]}
        ]},
        {'用户线程实现（1：N）':[
            {'用户线程':[
                '建立在用户空间的线程库上，系统内核感知不到其存在及实现'
            ]},
            {'优点':[
                '线程操作如建立、同步、销毁完全在用户态中完成',
                '不需内核帮助，不需切换内核态，操作快且低消耗，支持大线程数量'
            ]},
            {'缺点':[
                '没有系统内核的支援',
                '所有的线程操作都由用户程序自己处理'
            ]}
        ]},
        '使用用户线程加轻量级进程混合实现（N：M）'
    ]},
    {'Java线程':[
        '一个Java线程:直接映射到一个操作系统原生线程来实现的',
        {'线程调度':[
            {'协同式':[
                '线程执行时间自己控制',
                '自己工作执行完后，主动通知系统切换到另外一个线程'
            ]},
            {'抢占式':[
                '每个线程由系统来分配执行时间',
                '线程的切换不由线程本身来决定'
            ]}
        ]},
        {'状态转换':[
            '新建（New）：创建后尚未启动的线程',
            {'运行（Runnable）':[
                '操作系统线程状态中的Running和Ready',
                '线程可能正在执行，可能在等待操作系统为它分配执行时间'
            ]},
            '无限期等待（Waiting）：线程不会被分配处理器执行时间，要等待被其他线程显式唤醒',
            '限期等待（Timed Waiting）：线程不会被分配处理器执行时间，一定时间后由系统自动唤醒',
            '阻塞（Blocked）:线程等待一个排它锁',
            '结束（Terminated）：线程已经结束执行'
        ]}
    ]},
],
'Java与协程':[
    {'协程':[
        '有栈协程,会完整地做调用栈的保护、恢复工作'
    ]},
    {'线程切换':[
        {'线程切换时的上下文数据':[
            '线程共享资源：物理硬件的各种存储设备和寄存器',
            '线程角度:方法的调用栈中存储的各类信息',
            '操作系统和硬件的角度:存储在内存、缓存和寄存器中的具体数值'
        ]},
        '1.中断发生，线程A切换到线程B之前，操作系统把线程A的上下文数据保管好',
        '2.把寄存器、内存分页等恢复到线程B挂起时候的状态',
    ]}
]


}

#构建xmind
xmind.build(content,r2)

#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 