import os,sys 
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 
sys.path.insert(0,parentdir) 

import xmind
from xmind.core.markerref import MarkerId
xmind_name="redis"
w = xmind.load(os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 
s2=w.createSheet()
s2.setTitle("高并发系统三大利器")
r2=s2.getRootTopic()
r2.setTitle("高并发系统三大利器")


content={
'高并发':[
    '=大流量，需要运用技术手段抵抗流量的冲击',
    '这些手段好比操作流量，能让流量更平稳地被系统所处理，带给用户更好的体验'
],
'高并发系统设计的目标':[
    {'高性能':[
        '系统的并行处理能力',
        '系统响应时间'
    ]},
    {'高可用':[
        '系统可以正常服务的时间'
    ]},
    {'高扩展':[
        '系统的扩展能力',
        '流量高峰时能否在短时间内完成扩容，更平稳地承接峰值流量'
    ]},
],
'高并发系统三大利器':[
    {'限流':[
        '限制系统的输入和输出流量达到保护系统的目的',
        '测算系统吞吐量，达到阈值，采取一些措施限制流量',
        {'限流操作':[
            '拒绝服务：就是把请求直接拒绝掉',
            '服务降级',
            '延迟处理：把请求放入队列，然后依次处理队列里的请求，流量较大时会导致处理不及时，有一定的延时'
        ]},
        {'限流算法':[
            {'令牌桶':[
                {'目的':[
                    '控制发送到网络上的数据数目(允许突发数据的发送)',
                    '服务降级时，限制非核心页面的访问',
                ]},
                '生成令牌的速度是恒定的，请求去拿令牌没有速度限制,拿不到令牌被拒绝'
            ]},
            {'漏桶':[
                {'目的':[
                    '控制数据注入到网络的速率，平滑网络上的突发流量'
                ]},
                '漏桶出水速度恒定，如瞬时大流量，将有大部分请求被丢弃掉（即溢出）'
            ]}
        ]}
    ]},
    {'降级':[
        '将系统功能分级，系统出现问题时，将不是重要的功能进行降级，停止服务，释放出更多资源供给核心功能',
        {'服务降级方式':[
            '延迟服务：定时任务处理、或者mq延时处理',
            '页面降级：页面点击按钮全部置灰,...',
            '关闭非核心服务',
            '写降级:如秒杀活动，只进行Cache更新返回，再通过mq异步扣减库存到DB,保证最终一致性'
        ]}
    ]},
    {'缓存':[
        '降低系统处理工作量提高系统访问速度(有些重复性的程序处理工作已经被缓存下来)',
        '数据库缓存：避免频繁的数据库查询，将热点数据放入内存，下次从内存中直接返回',
        '服务器缓存：缓存热点数据，当多用户访问时，可有效降低服务器压力',
        '浏览器缓存：缓存最近用到的图片，数据，页面等，提高网页打开速度'
    ]},
]


}

#构建xmind
xmind.build(content,r2)
#保存xmind
xmind.save(w,os.path.dirname(os.path.abspath(__file__))+"\\"+xmind_name+".xmind") 